#include <stdio.h>
#include <string.h>

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}
void solveAffineCipher(int cipher1, int plain1, int cipher2, int plain2, int *a, int *b) {
    int m = 26;
    int diffCipher = (cipher1 - cipher2 + m) % m;
    int diffPlain = (plain1 - plain2 + m) % m;
    
    *a = (diffCipher * modInverse(diffPlain, m)) % m;
    *b = (cipher1 - (*a * plain1) % m + m) % m;
}

char decryptAffine(int a, int b, char cipherChar) {
    int m = 26;
    int a_inv = modInverse(a, m); 
    
    if (cipherChar >= 'A' && cipherChar <= 'Z') {
        int y = cipherChar - 'A'; 
        int x = (a_inv * (y - b + m)) % m; 
        return x + 'A'; 
    }
    return cipherChar; 
}

int main() {
    int cipher1 = 1, cipher2 = 20; 
    int plain1 = 4, plain2 = 19;   
    int a, b;
    
    solveAffineCipher(cipher1, plain1, cipher2, plain2, &a, &b);

    printf("Found keys: a = %d, b = %d\n", a, b);


    char ciphertext[] = "BUUBB";  
    char decryptedText[100];
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        decryptedText[i] = decryptAffine(a, b, ciphertext[i]);
    }
    decryptedText[strlen(ciphertext)] = '\0'; 

    printf("Decrypted Text: %s\n", decryptedText);

    return 0;
}
