#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

void generateCipherAlphabet(char keyword[], char cipherAlphabet[]) {
    int alphabet[ALPHABET_SIZE] = {0};  // Track used letters
    int index = 0;
    for (int i = 0; i < strlen(keyword); i++) {
        char ch = toupper(keyword[i]);
        if (alphabet[ch - 'A'] == 0) {
            cipherAlphabet[index++] = ch;
            alphabet[ch - 'A'] = 1;
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (alphabet[ch - 'A'] == 0) {
            cipherAlphabet[index++] = ch;
        }
    }
}

void encrypt(char plaintext[], char cipherAlphabet[], char ciphertext[]) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char ch = toupper(plaintext[i]);
            ciphertext[i] = cipherAlphabet[ch - 'A'];
        } else {
            ciphertext[i] = plaintext[i];  
        }
    }
    ciphertext[strlen(plaintext)] = '\0';  
}

int main() {
    char keyword[100], plaintext[100], ciphertext[100];
    char cipherAlphabet[ALPHABET_SIZE];

    printf("Enter the keyword: ");
    scanf("%s", keyword);
    
    printf("Enter the plaintext: ");
    getchar();  
    fgets(plaintext, sizeof(plaintext), stdin);
    
    plaintext[strcspn(plaintext, "\n")] = '\0';

    generateCipherAlphabet(keyword, cipherAlphabet);

    printf("Generated Cipher Alphabet: ");
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c", cipherAlphabet[i]);
    }
    printf("\n");

    encrypt(plaintext, cipherAlphabet, ciphertext);

    printf("Encrypted Ciphertext: %s\n", ciphertext);

    return 0;
}
