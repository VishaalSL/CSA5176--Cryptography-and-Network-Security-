#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void createKeyMatrix(char key[], char keyMatrix[SIZE][SIZE]) {
    int i, j, k = 0;
    int alphabet[26] = {0};
    alphabet['J' - 'A'] = 1; 

    for (i = 0; i < strlen(key); i++) {
        if (key[i] == 'J') key[i] = 'I';  
        if (alphabet[key[i] - 'A'] == 0) {
            alphabet[key[i] - 'A'] = 1;
            keyMatrix[k / SIZE][k % SIZE] = key[i];
            k++;
        }
    }
   for (i = 0; i < 26; i++) {
        if (alphabet[i] == 0) {
            keyMatrix[k / SIZE][k % SIZE] = 'A' + i;
            k++;
        }
    }
}
void printKeyMatrix(char keyMatrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", keyMatrix[i][j]);
        }
        printf("\n");
    }
}
void findPosition(char ch, char keyMatrix[SIZE][SIZE], int *row, int *col) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void preprocessText(char text[]) {
    int len = strlen(text);
    char newText[100];
    int i, k = 0;

    for (i = 0; i < len; i++) {
        if (text[i] != ' ') {
            text[k++] = toupper(text[i]);
        }
    }
    text[k] = '\0';

    len = strlen(text);
    for (i = 0; i < len - 1; i += 2) {
        if (text[i] == text[i + 1]) {
            for (int j = len; j > i; j--) {
                text[j] = text[j - 1];
            }
            text[i + 1] = 'X';
            len++;
        }
    }

    if (len % 2 != 0) {
        text[len] = 'X';
        text[len + 1] = '\0';
    }
}

void encryptPlayfair(char plaintext[], char keyMatrix[SIZE][SIZE], char ciphertext[]) {
    int row1, col1, row2, col2;
    int len = strlen(plaintext);
    int k = 0;

    for (int i = 0; i < len; i += 2) {
        findPosition(plaintext[i], keyMatrix, &row1, &col1);
        findPosition(plaintext[i + 1], keyMatrix, &row2, &col2);

        if (row1 == row2) {
            ciphertext[k++] = keyMatrix[row1][(col1 + 1) % SIZE];
            ciphertext[k++] = keyMatrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            ciphertext[k++] = keyMatrix[(row1 + 1) % SIZE][col1];
            ciphertext[k++] = keyMatrix[(row2 + 1) % SIZE][col2];
        } else {
            ciphertext[k++] = keyMatrix[row1][col2];
            ciphertext[k++] = keyMatrix[row2][col1];
        }
    }
    ciphertext[k] = '\0';
}
int main() {
    char key[100], plaintext[100], ciphertext[100];
    char keyMatrix[SIZE][SIZE];

    printf("Enter keyword: ");
    scanf("%s", key);

    printf("Enter plaintext: ");
    scanf("%s", plaintext);

    preprocessText(plaintext);
    createKeyMatrix(key, keyMatrix);

    printf("Key Matrix:\n");
    printKeyMatrix(keyMatrix);

    encryptPlayfair(plaintext, keyMatrix, ciphertext);

    printf("Encrypted ciphertext: %s\n", ciphertext);

    return 0;
}
